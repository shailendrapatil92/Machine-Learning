from __future__ import division
import numpy as np
from operator import __truediv__
from collections import defaultdict
from operator import add
from operator import div
from operator import mul
import matplotlib.pyplot as plt

#Reading the input file
f = open('/Users/shailendrapatil/Spring 2017/ML/Assignments/Assignment2/data2.txt',"r")
file_data = f.read()
file_data = file_data.split()
input_data = [float(x) for x in file_data]

mean=[]
sd =[]
temp_postertior=[]
posteriors = defaultdict(list) #P(b/Xi)
weights = [] #P(a),P(b)
probability=defaultdict(list) #P(Xi/b)P(b) where b is any gaussian
twopi=2*3.14
likelihood=[]

np.random.seed(10)
def initialization(gaussians):
    mean = [np.random.choice(input_data) for i in range(gaussians)]
    sd = [np.random.randint(10, 25) for i in range(gaussians)]
    weights = [1 / no_of_gaussian for i in range(gaussians)]
    return mean,sd,weights

def expectation(mean,sd,weights):
    for j in range(no_of_gaussian):
        probability[j] = [(1 / np.sqrt(twopi * sd[j] ** 2.0)) * (np.exp(-(((value - mean[j]) ** 2) / (2.0 * sd[j] ** 2))))*weights[j] for value in input_data]
    probability_denominator=[0.0 for i in range(len(input_data))]

    for i in range(no_of_gaussian):
        probability_denominator=np.add(probability_denominator,np.add(probability[i],0))
    for i in range(no_of_gaussian):
        posteriors[i]=map(__truediv__, probability[i], probability_denominator)

    loglikelihood = []
    for i in range(len(input_data)):
        tempsumloglikelihood = 0
        for j in range(no_of_gaussian):
            tempsumloglikelihood = tempsumloglikelihood + probability[j][i]
        loglikelihood.append(np.log(tempsumloglikelihood))
    likelihood.append(sum(loglikelihood))
    return posteriors

def maximization(posteriors):
    for i in range(no_of_gaussian):
        sums = 0
        diff = 0
        for j in range(len(input_data)):
            sums = sums+(posteriors[i][j]*input_data[j])
        mean[i] = sums/np.sum(posteriors[i])
        for j in range(len(input_data)):
            diff = diff+(((input_data[j]-mean[i])**2)*(posteriors[i][j]))
        sd[i] = np.sqrt(diff/np.sum(posteriors[i]))
    weights = [sum(posteriors[i]) / len(posteriors[i]) for i in range(no_of_gaussian)]
    return mean,sd,weights

no_of_gaussian = input("Enter no of Gaussian:")
mean,sd,weights=initialization(no_of_gaussian)

print"Initial Values",mean,sd,weights
for i in range(500):
    posteriors=expectation(mean,sd,weights)
    mean,sd,weights = maximization(posteriors)
    if(i>2):
        if (((likelihood[-1] - likelihood[-2])/likelihood[-2]) < 0.00000001): #Terminating condition for convergence
            break


print"The final mean,sd and weights after %d are"%i,mean,sd,weights
plt.plot(likelihood)
plt.xlabel("Iterations")
plt.ylabel("Log Likelihood")
plt._show()
